
#######################################################################
# +-----------------------------------------------------------------+ #
# |                            BO3 object                           | #
# +-----------------------------------------------------------------+ #
#######################################################################

# This is the config file of a custom object.
# If you add this object correctly to your BiomeConfigs, it will spawn in the world.

# This is the creator of this BO3 object
Author: TrueMalice

# A short description of this BO3 object
Description: A dinosaur made of Quartz.

# The BO3 version, don't change this! It can be used by external applications to do a version check.
Version: 3

# The settings mode, WriteAll, WriteWithoutComments or WriteDisable. See WorldConfig.
SettingsMode: WriteDisable


#######################################################################
# +-----------------------------------------------------------------+ #
# |                          Main settings                          | #
# +-----------------------------------------------------------------+ #
#######################################################################

# This needs to be set to true to spawn the object in the Tree and Sapling resources.
Tree: false

# The frequency of the BO3 from 1 to 200. Tries this many times to spawn this BO3 when using the CustomObject(...) resource.
# Ignored by Tree(..), Sapling(..) and CustomStructure(..)
Frequency: 1

# The rarity of the BO3 from 0 to 100. Each spawn attempt has rarity% chance to succeed when using the CustomObject(...) resource.
# Ignored by Tree(..), Sapling(..) and CustomStructure(..)
Rarity: 0.25

# If you set this to true, the BO3 will be placed with a random rotation.
RotateRandomly: true

# The spawn height of the BO3 - randomY, highestBlock or highestSolidBlock.
SpawnHeight: highestBlock

# The height limits for the BO3.
MinHeight: 0

MaxHeight: 256

# Objects can have other objects attacthed to it: branches. Branches can also
# have branches attached to it, which can also have branches, etc. This is the
# maximum branch depth for this objects.
MaxBranchDepth: 10

# When spawned with the UseWorld keyword, this BO3 should NOT spawn in the following biomes.
# If you write the BO3 name directly in the BiomeConfigs, this will be ignored.
ExcludedBiomes:


#######################################################################
# +-----------------------------------------------------------------+ #
# |                      Source block settings                      | #
# +-----------------------------------------------------------------+ #
#######################################################################

# The block the BO3 should spawn in
SourceBlock: 0

# The maximum percentage of the BO3 that can be outside the SourceBlock.
# The BO3 won't be placed on a location with more blocks outside the SourceBlock than this percentage.
MaxPercentageOutsideSourceBlock: 100

# What to do when a block is about to be placed outside the SourceBlock? (dontPlace, placeAnyway)
OutsideSourceBlock: placeAnyway


#######################################################################
# +-----------------------------------------------------------------+ #
# |                              Blocks                             | #
# +-----------------------------------------------------------------+ #
#######################################################################

# All the blocks used in the BO3 are listed here. Possible blocks:
# Block(x,y,z,id[.data][,nbtfile.nbt)
# RandomBlock(x,y,z,id[:data][,nbtfile.nbt],chance[,id[:data][,nbtfile.nbt],chance[,...]])
# So RandomBlock(0,0,0,CHEST,chest.nbt,50,CHEST,anotherchest.nbt,100) will spawn a chest at
# the BO3 origin, and give it a 50% chance to have the contents of chest.nbt, or, if that
# fails, a 100% percent chance to have the contents of anotherchest.nbt.
Block(-2,-3,0,STEP:15)
Block(-2,-2,0,STEP:15)
Block(-2,-1,0,QUARTZ_STAIRS:5)
Block(-1,-3,0,STEP:15)
Block(-1,-2,0,STEP:15)
Block(-1,-1,0,QUARTZ_BLOCK)
Block(0,-3,-1,STEP:15)
Block(0,-3,0,STEP:15)
Block(0,-3,1,STEP:15)
Block(0,-2,-1,QUARTZ_STAIRS:6)
Block(0,-2,0,QUARTZ_STAIRS:4)
Block(0,-2,1,QUARTZ_STAIRS:7)
Block(0,-1,-1,STEP:7)
Block(0,-1,0,QUARTZ_STAIRS)
Block(0,-1,1,STEP:7)
Block(0,0,0,STEP:7)
Block(1,-2,-1,QUARTZ_BLOCK)
Block(1,-2,0,DOUBLE_STEP:7)
Block(1,-2,1,QUARTZ_BLOCK)
Block(1,-1,-1,STEP:7)
Block(1,-1,0,QUARTZ_BLOCK)
Block(1,-1,1,STEP:7)
Block(1,0,0,STEP:7)
Block(2,-2,0,QUARTZ_STAIRS:4)
Block(2,-1,0,QUARTZ_STAIRS:1)
Block(3,-7,-1,QUARTZ_STAIRS:5)
Block(3,-7,1,QUARTZ_STAIRS:5)
Block(3,-6,-1,QUARTZ_STAIRS)
Block(3,-6,1,QUARTZ_STAIRS)
Block(3,-5,-1,QUARTZ_STAIRS:4)
Block(3,-5,1,QUARTZ_STAIRS:4)
Block(3,-4,-1,QUARTZ_BLOCK)
Block(3,-4,1,QUARTZ_BLOCK)
Block(3,-3,0,STEP:15)
Block(3,-2,0,QUARTZ_STAIRS:1)
Block(4,-6,0,STEP:15)
Block(4,-5,-1,QUARTZ_STAIRS)
Block(4,-5,1,QUARTZ_STAIRS)
Block(4,-4,-1,QUARTZ_STAIRS:4)
Block(4,-4,1,QUARTZ_STAIRS:4)
Block(4,-3,-1,QUARTZ_BLOCK)
Block(4,-3,0,QUARTZ_BLOCK)
Block(4,-3,1,QUARTZ_BLOCK)
Block(4,-2,0,QUARTZ_STAIRS)
Block(5,-6,0,STEP:15)
Block(5,-5,-1,QUARTZ_STAIRS)
Block(5,-5,1,QUARTZ_STAIRS)
Block(5,-4,-1,QUARTZ_STAIRS:4)
Block(5,-4,1,QUARTZ_STAIRS:4)
Block(5,-3,-1,STEP:7)
Block(5,-3,0,QUARTZ_BLOCK)
Block(5,-3,1,STEP:7)
Block(5,-2,0,QUARTZ_STAIRS)
Block(6,-11,-2,STEP:7)
Block(6,-11,2,STEP:7)
Block(6,-6,0,STEP:15)
Block(6,-5,-1,QUARTZ_STAIRS)
Block(6,-5,0,CHEST:4)
Block(6,-5,1,QUARTZ_STAIRS)
Block(6,-4,-1,QUARTZ_STAIRS:4)
Block(6,-4,1,QUARTZ_STAIRS:4)
Block(6,-3,-1,STEP:7)
Block(6,-3,0,QUARTZ_BLOCK)
Block(6,-3,1,STEP:7)
Block(6,-2,0,QUARTZ_STAIRS)
Block(7,-11,-3,QUARTZ_STAIRS)
Block(7,-11,-2,QUARTZ_BLOCK)
Block(7,-11,-1,QUARTZ_STAIRS)
Block(7,-11,1,QUARTZ_STAIRS)
Block(7,-11,2,QUARTZ_BLOCK)
Block(7,-11,3,QUARTZ_STAIRS)
Block(7,-4,-1,QUARTZ_STAIRS:4)
Block(7,-4,0,QUARTZ_STAIRS:4)
Block(7,-4,1,QUARTZ_STAIRS:4)
Block(7,-3,-1,STEP:7)
Block(7,-3,0,QUARTZ_BLOCK)
Block(7,-3,1,STEP:7)
Block(7,-2,0,QUARTZ_STAIRS)
Block(8,-11,-3,QUARTZ_STAIRS:2)
Block(8,-11,-2,QUARTZ_BLOCK)
Block(8,-11,-1,QUARTZ_STAIRS:3)
Block(8,-11,1,QUARTZ_STAIRS:2)
Block(8,-11,2,QUARTZ_BLOCK)
Block(8,-11,3,QUARTZ_STAIRS:3)
Block(8,-10,-2,QUARTZ_STAIRS)
Block(8,-10,2,QUARTZ_STAIRS)
Block(8,-7,-2,QUARTZ_STAIRS:4)
Block(8,-7,2,QUARTZ_STAIRS:4)
Block(8,-6,-2,QUARTZ_BLOCK)
Block(8,-6,2,QUARTZ_BLOCK)
Block(8,-5,-2,QUARTZ_BLOCK)
Block(8,-5,2,QUARTZ_BLOCK)
Block(8,-4,-2,QUARTZ_STAIRS)
Block(8,-4,-1,QUARTZ_BLOCK)
Block(8,-4,0,QUARTZ_BLOCK)
Block(8,-4,1,QUARTZ_BLOCK)
Block(8,-4,2,QUARTZ_STAIRS)
Block(8,-3,-1,QUARTZ_BLOCK)
Block(8,-3,0,QUARTZ_BLOCK)
Block(8,-3,1,QUARTZ_BLOCK)
Block(8,-2,-1,QUARTZ_STAIRS:2)
Block(8,-2,0,QUARTZ_STAIRS)
Block(8,-2,1,QUARTZ_STAIRS)
Block(9,-10,-2,QUARTZ_STAIRS:5)
Block(9,-10,2,QUARTZ_STAIRS:5)
Block(9,-9,-2,QUARTZ_BLOCK)
Block(9,-9,2,QUARTZ_BLOCK)
Block(9,-8,-2,QUARTZ_STAIRS:1)
Block(9,-8,2,QUARTZ_STAIRS:1)
Block(9,-7,-2,QUARTZ_STAIRS:5)
Block(9,-7,2,QUARTZ_STAIRS:5)
Block(9,-6,-2,QUARTZ_STAIRS:1)
Block(9,-6,2,QUARTZ_STAIRS:1)
Block(9,-5,-2,QUARTZ_STAIRS:5)
Block(9,-5,2,QUARTZ_STAIRS:5)
Block(9,-4,-2,QUARTZ_BLOCK)
Block(9,-4,-1,QUARTZ_BLOCK)
Block(9,-4,0,QUARTZ_BLOCK)
Block(9,-4,1,QUARTZ_BLOCK)
Block(9,-4,2,QUARTZ_BLOCK)
Block(9,-3,-2,STEP:7)
Block(9,-3,-1,QUARTZ_BLOCK)
Block(9,-3,0,QUARTZ_BLOCK)
Block(9,-3,1,QUARTZ_BLOCK)
Block(9,-3,2,STEP:7)
Block(9,-2,-1,QUARTZ_STAIRS:2)
Block(9,-2,0,QUARTZ_BLOCK)
Block(9,-2,1,QUARTZ_STAIRS:3)
Block(10,-4,-1,QUARTZ_BLOCK)
Block(10,-4,0,QUARTZ_BLOCK)
Block(10,-4,1,QUARTZ_BLOCK)
Block(10,-3,-1,QUARTZ_BLOCK)
Block(10,-3,0,QUARTZ_BLOCK)
Block(10,-3,1,QUARTZ_BLOCK)
Block(10,-2,-1,QUARTZ_STAIRS:2)
Block(10,-2,0,QUARTZ_STAIRS:1)
Block(10,-2,1,QUARTZ_STAIRS:3)
Block(11,-4,0,QUARTZ_STAIRS:4)
Block(11,-3,0,QUARTZ_BLOCK)
Block(12,-4,0,QUARTZ_STAIRS:4)
Block(12,-3,0,STEP:7)
Block(13,-5,0,QUARTZ_STAIRS:4)
Block(13,-4,0,QUARTZ_BLOCK)

#######################################################################
# +-----------------------------------------------------------------+ #
# |                            BO3 checks                           | #
# +-----------------------------------------------------------------+ #
#######################################################################

# Require a condition at a certain location in order for the BO3 to be spawned.
# BlockCheck(x,y,z,id[:data][,id[:data][,...]]) - one of the blocks must be at the location
# BlockCheckNot(x,y,z,id[:data][,id[:data][,...]]) - all the blocks must not be at the location
# LightCheck(x,y,z,minLightLevel,maxLightLevel) - light must be between min and max (inclusive)

#######################################################################
# +-----------------------------------------------------------------+ #
# |                             Branches                            | #
# +-----------------------------------------------------------------+ #
#######################################################################

# Branches are objects that will spawn when this object spawns when it is used in
# the CustomStructure resource. Branches can also have branches, making complex
# structures possible. See the wiki for more details.

# Regular Branches spawn each branch with an independent chance of spawning.
# Branch(x,y,z,branchName,rotation,chance[,anotherBranchName,rotation,chance[,...]][IndividualChance])
# branchName - name of the object to spawn.
# rotation - NORTH, SOUTH, EAST or WEST.
# IndividualChance - The chance each branch has to spawn, assumed to be 100 when left blank

# Weighted Branches spawn branches with a dependent chance of spawning.
# WeightedBranch(x,y,z,branchName,rotation,chance[,anotherBranchName,rotation,chance[,...]][MaxChanceOutOf])
# MaxChanceOutOf - The chance all branches have to spawn out of, assumed to be 100 when left blank
